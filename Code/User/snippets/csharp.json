{
	"Creates a class": {
		"prefix": "class",
		"body": [
			"public class ${TM_FILENAME_BASE}",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a class"
	},
	"Creates a static class": {
		"prefix": "sclass",
		"body": [
			"public static class ${TM_FILENAME_BASE}",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a class"
	},
	"Creates a extension static class": {
		"prefix": "eclass",
		"body": [
			"public static class ${TM_FILENAME_BASE}",
			"{",
			"\tpublic static void ${1:MyMethod}(this ${2:string} ${3:self})",
			"\t{",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Creates a class"
	},
	"Creates a disposable class": {
		"prefix": "classd",
		"body": [
			"public class ${TM_FILENAME_BASE} : IDisposable",
			"{",
			"",
			"\tpublic void Dispose()",
			"\t{",
			"\t\tGC.SuppressFinalize(this);",
			"\t}",
			"",
			"\t$0",
			"}"
		],
		"description": "Creates a disposable class"
	},
	"Creates a constant": {
		"prefix": "const",
		"body": [
			"${1:public} const ${2:string} ${3:CONSTANT_NAME} = \"${4:value}\";",
			"$0"
		],
		"description": "Creates a constant"
	},
	"Creates a call to WriteLine": {
		"prefix": "cwl",
		"body": [
			"Console.WriteLine($\"${1:Text}\");",
			"$0"
		],
		"description": "Creates a call to WriteLine"
	},
	"Creates an else statement": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates an else statement"
	},
	"Creates an enum type": {
		"prefix": "enum",
		"body": [
			"public enum ${1:MyEnumType}",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates an enum type"
	},
	"Creates an exception class": {
		"prefix": "exception",
		"body": [
			"public class ${1:MyException} : System.Exception",
			"{",
			"\tpublic $1() {}",
			"\tpublic $1(string message) : base(message) {}",
			"\tpublic $1(string message, System.Exception inner) : base(message, inner) {}",
			"\tpublic $1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context) {}",
			"}"
		],
		"description": "Creates an exception class"
	},
	"Creates a for loop": {
		"prefix": "for",
		"body": [
			"for (var ${1:i} = 0; $1 < ${2:length}; $1++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a for loop"
	},
	"Creates a foreach statement": {
		"prefix": "foreach",
		"body": [
			"foreach (var ${1:item} in ${2:collection})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a foreach statement"
	},
	"Creates a new instance of the Guid structure": {
		"prefix": "guid",
		"body": [
			"Guid ${1:guid} = Guid.NewGuid();",
			"$0"
		],
		"description": "Creates a new instance of the Guid structure"
	},
	"Creates as string, a new instance of the Guid structure without hyphens": {
		"prefix": "guidn",
		"body": [
			"string ${1:guid} = Guid.NewGuid().ToString(\"N\");",
			"$0"
		],
		"description": "Creates as string, a new instance of the Guid structure without hyphens"
	},
	"Creates an if statement": {
		"prefix": "if",
		"body": [
			"if (${1:true})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates an if statement"
	},
	"Creates an if else statement": {
		"prefix": "ifelse",
		"body": [
			"if (${1:true})",
			"{",
			"\t$0",
			"}",
			"else",
			"{",
			"\t",
			"}"
		],
		"description": "Creates an if else statement"
	},
	"Creates a conditional operator": {
		"prefix": "iif",
		"body": [
			"var ${1:value} = ${2:true};",
			"var ${3:result} = (${1} ? ${4:true} : ${5:false});",
			"$0"
		],
		"description": "Creates a conditional operator"
	},
	"Creates an interface": {
		"prefix": "interface",
		"body": [
			"public interface I${TM_FILENAME_BASE}",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates an interface"
	},
	"Creates a lock statement": {
		"prefix": "lock",
		"body": [
			"lock (${1:true})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a lock statement"
	},
	"Creates a Method structure": {
		"prefix": "method",
		"body": [
			"${1:public} ${2:void} ${3:MyMethod}(${4:string} ${5:parameter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a Method structure"
	},
	"Creates an Async Method structure": {
		"prefix": "method_async",
		"body": [
			"${1:public} async ${2:Task}<${3:object}> ${4:MyMethod}(${5:string} ${6:parameter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates an async Method structure"
	},
	"Creates a property": {
		"prefix": "prop",
		"body": [
			"${1:public} ${2:string} ${3:Name} { get; set; }",
			"",
			"$0"
		],
		"description": "Creates a property"
	},
	"Creates a property read-only": {
		"prefix": "propr",
		"body": [
			"public ${1:string} ${2:Name} { get; private set; }",
			"",
			"$0"
		],
		"description": "Creates a property read-only"
	},
	"Creates a record type": {
		"prefix": "record",
		"body": [
			"public record ${TM_FILENAME_BASE}(${1:string} ${2:Name});"
		],
		"description": "Creates a record type"
	},
	"Creates a record type with deconstructor": {
		"prefix": "recordd",
		"body": [
			"public record ${TM_FILENAME_BASE}",
			"{",
			"\tpublic ${TM_FILENAME_BASE}(${1:string} ${2:name}, ${3:int} ${4:age}) => (${5:Name}, ${6:Age}) = ($2, $4);",
			"",
			"\tpublic $1 $5 { get; set; }",
			"\tpublic $3 $6 { get; set; }",
			"",
			"\tpublic void Deconstructor(out $1 $2, out $3 $4) => ($2, $4) = ($5, $6);",
			"}"
		],
		"description": "Creates a record type with deconstructor"
	},
	"Creates a struct": {
		"prefix": "struct",
		"body": [
			"public struct ${1:MyStruct}",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a struct"
	},
	"Creates a switch statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:value})",
			"{",
			"\tcase ${2:value1}:",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}",
			"$0"
		],
		"description": "Creates a switch statement"
	},
	"Creates a try catch": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			"\t$0",
			"}",
			"catch (${1:System.Exception} ex)",
			"{",
			"\t // TODO",
			"}"
		],
		"description": "Creates a try catch"
	},
	"Creates a try catch finally": {
		"prefix": "tryf",
		"body": [
			"try",
			"{",
			"\t$0",
			"}",
			"catch (${1:System.Exception} ex)",
			"{",
			"\t // TODO",
			"}",
			"finally",
			"{",
			"\t",
			"}"
		],
		"description": "Creates a try catch finally"
	},
	"Creates an using": {
		"prefix": "using",
		"body": [
			"using ${1:System}$0;"
		],
		"description": "Creates an using"
	},
	"Creates a while loop": {
		"prefix": "while",
		"body": [
			"while (${1:true})",
			"{",
			"\t$0",
			"}"
		],
		"description": "Creates a while loop"
	},
	"Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code": {
		"prefix": "xml_<c>",
		"body": [
			"/// <c>${1:text}</c>"
		],
		"description": "Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code"
	},
	"Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code": {
		"prefix": "xml_<code>",
		"body": [
			"/// <code>",
			"/// ${1:content}",
			"/// </code>"
		],
		"description": "Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code"
	},
	"Xml Comment - <example> Lets you specify an example of how to use a method or other library member": {
		"prefix": "xml_<example>",
		"body": [
			"/// <example>",
			"/// ${1:description}",
			"/// </example>"
		],
		"description": "Xml Comment - <example> Lets you specify an example of how to use a method or other library member"
	},
	"Xml Comment - <exception> Lets you specify which exceptions can be thrown": {
		"prefix": "xml_<exception>",
		"body": [
			"/// <exception cref=\"${1:member}\">${2:description}</exception>"
		],
		"description": "Xml Comment - <exception> Lets you specify which exceptions can be thrown"
	},
	"Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code": {
		"prefix": "xml_<include>",
		"body": [
			"/// <include file='${1:filename}' path='${2:tagpath}[@name=\"${3:id}\"]' />"
		],
		"description": "Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code"
	},
	"Xml Comment - <list> A list or table can have as many <item> blocks as needed": {
		"prefix": "xml_<list>",
		"body": [
			"/// <list type=\"bullet\">",
			"///     <listheader>",
			"///        <term>${1:term}</term>",
			"///        <description>${2:description}</description>",
			"///     </listheader>",
			"///     <item>",
			"///        <term>${3:term}</term>",
			"///        <description>${4:description}</description>",
			"///     </item>",
			"/// </list>"
		],
		"description": "Xml Comment - <list> A list or table can have as many <item> blocks as needed"
	},
	"Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text": {
		"prefix": "xml_<para>",
		"body": [
			"/// <para>${1:content}</para>"
		],
		"description": "Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text"
	},
	"Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method": {
		"prefix": "xml_<param>",
		"body": [
			"/// <param name=\"${1:name}\">${2:description}</param>"
		],
		"description": "Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method"
	},
	"Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter": {
		"prefix": "xml_<paramref>",
		"body": [
			"/// <paramref name=\"${1:name}\"/>"
		],
		"description": "Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter"
	},
	"Xml Comment - <permission> Lets you document the access of a member": {
		"prefix": "xml_<permission>",
		"body": [
			"/// <permission cref=\"${1:member}\">${2:description}</permission>"
		],
		"description": "Xml Comment - <permission> Lets you document the access of a member"
	},
	"Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>": {
		"prefix": "xml_<remarks>",
		"body": [
			"/// <remarks>${1:description}</remarks>"
		],
		"description": "Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>"
	},
	"Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value": {
		"prefix": "xml_<returns>",
		"body": [
			"/// <returns>${1:description}</returns>"
		],
		"description": "Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value"
	},
	"Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section": {
		"prefix": "xml_<see>",
		"body": [
			"/// <see cref=\"${1:member}\"/>"
		],
		"description": "Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section"
	},
	"Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section": {
		"prefix": "xml_<seealso>",
		"body": [
			"/// <seealso cref=\"${1:member}\"/>"
		],
		"description": "Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section"
	},
	"Xml Comment - <summary> Should be used to describe a type or a type member": {
		"prefix": "xml_<summary>",
		"body": [
			"/// <summary>${1:description}</summary>"
		],
		"description": "Xml Comment - <summary> Should be used to describe a type or a type member"
	},
	"Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter": {
		"prefix": "xml_<typeparam>",
		"body": [
			"/// <typeparam name=\"${1:name}\">${2:description}</typeparam>"
		],
		"description": "Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter"
	},
	"Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics": {
		"prefix": "xml_<typeparamref>",
		"body": [
			"/// <typeparamref name=\"${1:name}\"/>"
		],
		"description": "Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics"
	},
	"Xml Comment - <value> Lets you describe the value that a property represents": {
		"prefix": "xml_<value>",
		"body": [
			"/// <value>${1:property-description}</value>"
		],
		"description": "Xml Comment - <value> Lets you describe the value that a property represents"
	},
	"ASP.NET Core - Creates a MVC/Api Action": {
		"prefix": "ac_action",
		"body": [
			"[${1:HttpGet}(nameof($2))]",
			"public async Task<IActionResult> ${2:ActionName}(${3:string} ${4:name})",
			"{",
			"\t$0",
			"\treturn Ok;",
			"}"
		],
		"description": "ASP.NET Core - Creates a MVC/Api Action"
	},
	"ASP.NET Core - Creates a comment block in ASP.NET": {
		"prefix": "ac_comment",
		"body": [
			"<%-- $0 -->"
		],
		"description": "ASP.NET Core - Creates a comment block in ASP.NET"
	},
	"ASP.NET Core - Creates the base of a controller": {
		"prefix": "ac_controller",
		"body": [
			"namespace ${1:Name}.Controllers",
			"{",
			"",
			"\tusing Microsoft.AspNetCore.Mvc;",
			"",
			"\tpublic class ${2:Name}Controller : Controller",
			"\t{",
			"\t\tpublic IActionResult Index()",
			"\t\t{",
			"\t\t\treturn View();",
			"\t\t}",
			"",
			"\t\tpublic IActionResult ${3:Welcome}()",
			"\t\t{",
			"\t\t\tViewData[\"Message\"] = \"Your welcome message\";",
			"",
			"\t\t\treturn View();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "ASP.NET Core - Creates the base of a controller"
	},
	"ASP.NET Core Web Api - Creates the base of a controller": {
		"prefix": "api_controller",
		"body": [
			"namespace ${1:Name}.Controllers",
			"{",
			"",
			"\tusing Microsoft.AspNetCore.Mvc;",
			"",
			"\t[Route(\"api/[controller]\")]",
			"\t[ApiController]",
			"\tpublic class ${2:Name}Controller : ControllerBase",
			"\t{",
			"\t\t[HttpGet]",
			"\t\tpublic async Task<IActionResult> Get()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t\treturn Ok();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "ASP.NET Core Web Api - Creates the base of a controller"
	},
	"ASP.NET Core Web Api - Creates the Delete Action of the WebApi": {
		"prefix": "api_delete",
		"body": [
			"[HttpDelete(\"{${1:value}\\}\")]",
			"public async Task ${2:DeleteAsync}(${3:string} $1)",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Web Api - Creates the Delete Action of the WebApi"
	},
	"ASP.NET Core Web Api - Creates the Get Action of the WebApi": {
		"prefix": "api_get",
		"body": [
			"[HttpGet(\"{${1:value}\\}\")]",
			"public async Task<ActionResult<${2:string}>> ${3:GetAsync}(${4:string} $1)",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Web Api - Creates the Get Action of the WebApi"
	},
	"ASP.NET Core Web Api - Creates the Put Action of the WebApi": {
		"prefix": "api_put",
		"body": [
			"[HttpPut(\"{${1:value}\\}\")]",
			"public async Task ${2:PutAsync}(${3:string} $1)",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Web Api - Creates the Put Action of the WebApi"
	},
	"ASP.NET Core Web Api - Creates the Post Action of the WebApi": {
		"prefix": "api_post",
		"body": [
			"[HttpPost(\"{${1:value}\\}\")]",
			"public async Task ${2:PostAsync}([FromBody] ${3:string} $1)",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Web Api - Creates the Post Action of the WebApi"
	},
	"ASP.NET Core Razor - Creates a code block for Razor": {
		"prefix": "rz_code",
		"body": [
			"@code {",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a code block for Razor"
	},
	"ASP.NET Core Razor - Creates a comment block for Razor": {
		"prefix": "rz_comment",
		"body": [
			"@* $0 *@"
		],
		"description": "ASP.NET Core Razor - Creates a comment block for Razor"
	},
	"ASP.NET Core Razor - Creates a directive block for Razor": {
		"prefix": "rz_directive",
		"body": [
			"@{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a directive block for Razor"
	},
	"ASP.NET Core Razor - Creates a do while loop for Razor": {
		"prefix": "rz_dowhile",
		"body": [
			"@{ var ${1:flag} = ${2:true}; }",
			"@do",
			"{",
			"\t$0",
			"} while ($1)"
		],
		"description": "ASP.NET Core Razor - Creates a do while loop for Razor"
	},
	"ASP.NET Core Razor - Creates a for statement for Razor": {
		"prefix": "rz_for",
		"body": [
			"@for (var ${1:i} = 0; $1 < ${2:length}; $1++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a for statement for Razor"
	},
	"ASP.NET Core Razor - Creates a foreach statement for Razor": {
		"prefix": "rz_foreach",
		"body": [
			"@foreach (var ${1:person} in ${2:people})",
			"{",
			"\t<${3:p}>${4:Name}: @$1.$4</$3>",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a foreach statement for Razor"
	},
	"ASP.NET Core Razor - Creates a functions block for Razor": {
		"prefix": "rz_functions",
		"body": [
			"@functions {",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a functions block for Razor"
	},
	"ASP.NET Core Razor - Creates an if statement for Razor": {
		"prefix": "rz_if",
		"body": [
			"@if (${1:true})",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates an if statement for Razor"
	},
	"ASP.NET Core Razor - Creates an if else statement for Razor": {
		"prefix": "rz_ifelse",
		"body": [
			"@if (${1:true})",
			"{",
			"\t$0",
			"}",
			"else",
			"{",
			"\t$2",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates an if else statement for Razor"
	},
	"ASP.NET Core Razor - Implements an interface for Razor": {
		"prefix": "rz_implements",
		"body": [
			"@implements I${1:MyInterface}",
			"",
			"\t$0"
		],
		"description": "ASP.NET Core Razor - Implements an interface for Razor"
	},
	"ASP.NET Core Razor - Creates an inherits directive for Razor": {
		"prefix": "rz_inherits",
		"body": [
			"@inherits ${1:MyClassToInheritFrom}",
			"",
			"\t$0"
		],
		"description": "ASP.NET Core Razor - Creates an inherits directive for Razor"
	},
	"ASP.NET Core Razor - Creates an inject directive for Razor": {
		"prefix": "rz_inject",
		"body": [
			"@inject I${1:MyInterface} ${2:MyInterface}",
			"$0"
		],
		"description": "ASP.NET Core Razor - Creates an inject directive for Razor"
	},
	"ASP.NET Core Razor - Specifies the model to use for Razor": {
		"prefix": "rz_model",
		"body": [
			"@model ${1:MyModel}",
			"$0"
		],
		"description": "ASP.NET Core Razor - Specifies the model to use for Razor"
	},
	"ASP.NET Core Razor - Specifies the namespace to use for Razor": {
		"prefix": "rz_namespace",
		"body": [
			"@namespace ${1:MyNamespace}",
			"$0"
		],
		"description": "ASP.NET Core Razor - Specifies the namespace to use for Razor"
	},
	"ASP.NET Core Razor - Creates a HTML markup for Razor": {
		"prefix": "rz_raw",
		"body": [
			"@Html.Raw(\"<${1:span}>${2:Hello World}</$1>\")"
		],
		"description": "ASP.NET Core Razor - Creates a HTML markup for Razor"
	},
	"ASP.NET Core Razor - Creates a RenderBody for Razor": {
		"prefix": "rz_renderbody",
		"body": [
			"@RenderBody()"
		],
		"description": "ASP.NET Core Razor - Creates RenderBody for Razor"
	},
	"ASP.NET Core Razor - Creates a switch statement for Razor": {
		"prefix": "rz_switch",
		"body": [
			"@switch (${1:value})",
			"{",
			"\tcase ${2:value1}:",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}",
			"$0"
		],
		"description": "ASP.NET Core Razor - Creates a switch statement for Razor"
	},
	"ASP.NET Core Razor - Creates a try catch finally for Razor": {
		"prefix": "rz_try",
		"body": [
			"@try",
			"{",
			"\t$0",
			"}",
			"catch (${1:Exception} ${2:ex})",
			"{",
			"\t<${3:p}>Error: @$2.Message</$3>",
			"}",
			"finally",
			"{",
			"\t",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a try catch finally for Razor"
	},
	"ASP.NET Core Razor - Creates an using statement for Razor": {
		"prefix": "rz_using",
		"body": [
			"@using (${1:Html.BeginForm()})",
			"{",
			"\t$0",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates an using statement for Razor"
	},
	"ASP.NET Core Razor - Creates a ViewBag for Razor": {
		"prefix": "rz_viewbag",
		"body": [
			"@ViewBag.${1:MyViewBagName}",
			"$0"
		],
		"description": "ASP.NET Core Razor - Creates a ViewBag for Razor"
	},
	"ASP.NET Core Razor - Creates a ViewData for Razor": {
		"prefix": "rz_viewdata",
		"body": [
			"@ViewData[\"${1:myViewData}\"]",
			"$0"
		],
		"description": "ASP.NET Core Razor - Creates a ViewData for Razor"
	},
	"ASP.NET Core Razor - Creates a while loop for Razor": {
		"prefix": "rz_while",
		"body": [
			"@{ var ${1:flag} = ${2:true}; }",
			"@while ($1)",
			"{",
			"\t$0",
			"\t$1 = ${3:false};",
			"}"
		],
		"description": "ASP.NET Core Razor - Creates a while loop for Razor"
	},
	".NET Core - Creates a MS-Test class": {
		"prefix": "mstest",
		"body": [
			"using Microsoft.VisualStudio.TestTools.UnitTesting;",
			"using System;",
			"",
			"namespace ${1:ProjectNamespace}.Test",
			"{",
			"\t[TestClass]",
			"\tpublic class ${2:ClassName}Test",
			"\t{",
			"\t\t[TestMethod]",
			"\t\tpublic void ${3:MethodName}()",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Creates a MS-Test class with the basic usings and configurable namespace, class and method names"
	},
	"gRPC .Net 5 - Creates csproj for the Client": {
		"prefix": "gRPC_client_csproj",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
			"",
			"\t<PropertyGroup>",
			"\t\t<TargetFramework>net5.0</TargetFramework>",
			"\t</PropertyGroup>",
			"",
			"\t<ItemGroup>",
			"\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Client\" Link=\"Protos\\greet.proto\" />",
			"",
			"\t\t<PackageReference Include=\"Google.Protobuf\" Version=\"3.13.0\" />",
			"\t\t<PackageReference Include=\"Grpc.Net.Client\" Version=\"2.33.1\" />",
			"\t\t<PackageReference Include=\"Grpc.Tools\" Version=\"2.33.1\" PrivateAssets=\"All\" />",
			"\t</ItemGroup>",
			"",
			"</Project>"
		],
		"description": "gRPC .NET 5 - Creates the csproj for the Client"
	},
	"gRPC .Net 5 - Creates the Program class for a simple Client": {
		"prefix": "gRPC_client_program",
		"body": [
			"using Greet;",
			"using Grpc.Net.Client;",
			"using System;",
			"using System.Threading.Tasks;",
			"",
			"namespace Client",
			"{",
			"\tpublic class Program",
			"\t{",
			"\t\tpublic static async Task Main(string[] args)",
			"\t\t{",
			"\t\t\ttry",
			"\t\t\t{",
			"\t\t\t\tusing var channel = GrpcChannel.ForAddress(\"http://localhost:5000\");",
			"\t\t\t\tvar client = new Greeter.GreeterClient(channel);",
			"",
			"\t\t\t\tvar reply = await client.SayHelloAsync(new HelloRequest { Name = \"GreeterClient\" });",
			"\t\t\t\tConsole.WriteLine(\"Greeting: \" + reply.Message);",
			"\t\t\t}",
			"\t\t\tcatch (Exception ex)",
			"\t\t\t{",
			"\t\t\t\tConsole.WriteLine($\"ERROR: {ex.Message}\");",
			"\t\t\t}",
			"",
			"\t\t\tConsole.WriteLine(\"Shutting down\");",
			"\t\t\tConsole.WriteLine(\"Press any key to exit...\");",
			"\t\t\tConsole.ReadKey();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "gRPC .NET 5 - Creates the Program class for the Client"
	},
	"gRPC .Net 5 - Creates a Proto sample file for the App": {
		"prefix": "gRPC_proto",
		"body": [
			"// Create a Proto folder and keep there this greet.proto file",
			"syntax = \"proto3\";",
			"",
			"package greet;",
			"",
			"// Greeting service definition",
			"service Greeter {",
			"\t// Sends a greeting",
			"\trpc SayHello (HelloRequest) returns (HelloReply);",
			"}",
			"",
			"// The request message containing the user's name",
			"message HelloRequest {",
			"\tstring name = 1;",
			"}",
			"",
			"// The response message containing the greetings",
			"message HelloReply {",
			"\tstring message = 1;",
			"}"
		],
		"description": "gRPC .NET 5 - Creates a Proto sample file for the App"
	},
	"gRPC .Net 5 - Creates csproj for the Server": {
		"prefix": "gRPC_server_csproj",
		"body": [
			"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
			"",
			"\t<PropertyGroup>",
			"\t\t<TargetFramework>net5.0</TargetFramework>",
			"\t</PropertyGroup>",
			"",
			"\t<ItemGroup>",
			"\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Server\" Link=\"Protos\\greet.proto\" />",
			"",
			"\t\t<PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.33.1\" />",
			"\t</ItemGroup>",
			"",
			"</Project>"
		],
		"description": "gRPC .NET 5 - Creates the csproj for the Server"
	},
	"gRPC .Net 5 - Creates the Program class for the Server": {
		"prefix": "gRPC_server_program",
		"body": [
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.Extensions.Hosting;",
			"",
			"namespace Server",
			"{",
			"\tpublic class Program",
			"\t{",
			"\t\tpublic static void Main(string[] args)",
			"\t\t{",
			"\t\t\tCreateHostBuilder(args).Build().Run();",
			"\t\t}",
			"",
			"\t\tpublic static IHostBuilder CreateHostBuilder(string[] args) =>",
			"\t\t\tHost.CreateDefaultBuilder(args)",
			"\t\t\t\t.ConfigureWebHostDefaults(webBuilder =>",
			"\t\t\t\t{",
			"\t\t\t\t\twebBuilder.UseStartup<Startup>();",
			"\t\t\t\t});",
			"\t}",
			"}"
		],
		"description": "gRPC .NET 5 - Creates the Program class for the Server"
	},
	"gRPC .Net 5 - Creates the Service class for the Server": {
		"prefix": "gRPC_server_service",
		"body": [
			"using Greet;",
			"using Grpc.Core;",
			"using Microsoft.Extensions.Logging;",
			"using System.Threading.Tasks;",
			"",
			"namespace Server",
			"{",
			"\tpublic class GreeterService : Greeter.GreeterBase",
			"\t{",
			"\t\tprivate readonly ILogger _logger;",
			"",
			"\t\tpublic GreeterService(ILoggerFactory loggerFactory)",
			"\t\t{",
			"\t\t\t_logger = loggerFactory.CreateLogger<GreeterService>();",
			"\t\t}",
			"",
			"\t\tpublic override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)",
			"\t\t{",
			"\t\t\t_logger.LogInformation($\"Sending hello to {request.Name}\");",
			"\t\t\treturn Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "gRPC .NET 5 - Creates the Service class for the Server"
	},
	"gRPC .Net 5 - Creates the Settings (appsettings.json) content for the Server": {
		"prefix": "gRPC_server_settings",
		"body": [
			"{",
			"\t\"Logging\": {",
			"\t\t\"LogLevel\": {",
			"\t\t\t\"Default\": \"Information\"",
			"\t\t}",
			"\t},",
			"\t\"AllowedHosts\": \"*\",",
			"\t\"Kestrel\": {",
			"\t\t\"EndpointDefaults\": {",
			"\t\t\t\"Protocols\": \"Http2\"",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "gRPC .NET 5 - Creates the Settings (appsettings.json) content for the Server"
	},
	"gRPC .Net 5 - Creates the Startup class for the Server": {
		"prefix": "gRPC_server_startup",
		"body": [
			"using Microsoft.AspNetCore.Builder;",
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.Extensions.DependencyInjection;",
			"using Microsoft.Extensions.Hosting;",
			"",
			"namespace Server",
			"{",
			"\tpublic class Startup",
			"\t{",
			"\t\tpublic void ConfigureServices(IServiceCollection services)",
			"\t\t{",
			"\t\t\tservices.AddGrpc();",
			"\t\t}",
			"",
			"\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)",
			"\t\t{",
			"\t\t\tif (env.IsDevelopment())",
			"\t\t\t{",
			"\t\t\t\tapp.UseDeveloperExceptionPage();",
			"\t\t\t}",
			"",
			"\t\t\tapp.UseRouting();",
			"",
			"\t\t\tapp.UseEndpoints(endpoints =>",
			"\t\t\t{",
			"\t\t\t\tendpoints.MapGrpcService<GreeterService>();",
			"\t\t\t});",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "gRPC .NET 5 - Creates the Startup class for the Server"
	},
	"Extension for get the MD5 value from a stream": {
		"prefix": "ex_md5_from_stream",
		"body": [
			"public static string GetMD5(this System.IO.Stream stream)",
			"{",
			"\tstream.Position = 0;",
			"\tvar arrayByteHashValue = new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(stream);",
			"\treturn BitConverter.ToString(arrayByteHashValue).Replace(\"-\", String.Empty).ToLower();",
			"}"
		],
		"description": "Extension for get the MD5 value from a stream"
	},
	"Extension for convert a stream to string": {
		"prefix": "ex_stream_to_string",
		"body": [
			"public static string ToString(this System.IO.Stream stream)",
			"{",
			"\tstream.Position = 0;",
			"\treturn new System.IO.StreamReader(stream).ReadToEnd();",
			"}"
		],
		"description": "Extension for convert a stream to string"
	},
	"Extension for convert a string to stream": {
		"prefix": "ex_string_to_stream",
		"body": [
			"public static System.IO.Stream ConvertToStream(this string source)",
			"{",
			"\tvar byteArray = System.Text.Encoding.UTF8.GetBytes(source);",
			"\treturn new System.IO.MemoryStream(byteArray);",
			"}"
		],
		"description": "Extension for convert a string to stream"
	}
}